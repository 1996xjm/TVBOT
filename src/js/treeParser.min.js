class TreeParser{constructor(){}identifyTreeFile(t){if(console.log(t),"object"==typeof t)return console.log({aa:t}),this.parsePhyloxml(t);{let e=t.trim().split("\n");return e[0].trim().toUpperCase().startsWith("#NEXUS")?this.parseNexus(e):this.parseNewick(t)}}parseNewick(e,A){this.nodeArr=[];const W=this;e=(e=(e=(e=e.replaceAll("\n","").replaceAll("\r","")).slice(e.indexOf("("))).trim()).endsWith(";")?e.slice(0,-1):e;let v=0;let t=function t(r,n=void 0){let l=0,s=!1,i="";for(let e=0,t=0,n=0;n<r.length;n++)if(!["'",'"'].includes(r[n])||s){if(r[n]==i&&s&&(s=!1),"("!=r[n]||s||e++,")"!=r[n]||s||t++,e==t){l=n;break}}else s=!0,i=r[n];let h=r.slice(l+1).split(":");for(let e=0;e<h.length;e++)h[e]=h[e].trim();if(1==h.length&&h.push(void 0),h[1]){let e=h[1].match(/\[[0-9.]*\]/);e&&(h[0]=e[0].slice(1,-1),console.log("处理bt值隐藏在[]里面的情况",e,h))}let a={name:h[0],length:h[1]?Number(h[1].match(/^[^[]*/g)[0]):Number(h[1]),btArr:[],children:[],nodeIndex:`N${v}`,uniformNodeId:`N${v}`,parent:n};if(W.nodeArr.push(a),v++,""!=h[0]){h[0].split("/").forEach(e=>{isNaN(Number(e))||a.btArr.push(Number(e))});let e=h[0].match(/\[&.*\]/);if(e){var o=e[0].slice(2,-1);let t=[],n=0,r=0,l={};var c=e=>{let t=e.join("").split("=");t.length<2||(t[1].startsWith("{")?l[t[0]]=t[1].slice(1,-1).split(",").map(e=>Number(e)):(e=t[1].startsWith('"')?Number(t[1].slice(1,-1)):Number(t[1]),l[t[0]]=isNaN(e)?t[1].slice(1,-1):e))};for(let e=0;e<o.length;e++)","==o[e]?n==r?(c(t),t=[]):t.push(o[e]):("{"==o[e]?n++:"}"==o[e]&&r++,t.push(o[e])),e==o.length-1&&c(t);a.otherProperty_L=l}else isNaN(Number(h[0]))&&(a.hasInternalNodeID=!0,a.internalNodeID=h[0],a.uniformNodeId=h[0])}var d=r.slice(0,l+1);let m=[],p=0,u=0,f=!1,g="",N=0,b=0;for(let e=0;e<d.length;e++)if("("==d[e])m.push(d[e]),f||p++;else if("["==d[e])m.push(d[e]),N++;else if("]"==d[e])m.push(d[e]),b++;else if(","==d[e])if(p-u==1&&N==b){let n=m.slice(1).join("").trim();if(m=m.slice(0,1),n.startsWith("("))a.children.push(t(n,a));else{let t=[];if(n.startsWith("'")||n.startsWith('"')){console.log(n);var x=n[0],x=n.lastIndexOf(x);t[0]=n.slice(1,x),t[1]=x==n.length-1?void 0:n.slice(n.lastIndexOf(":")+1)}else{t=n.split(":");for(let e=0;e<t.length;e++)t[e]=t[e].trim()}1==t.length&&t.push(void 0);let e={name:t[0].match(/^[^[]*/g)[0],length:t[1]?Number(t[1].match(/^[^[]*/g)[0]):Number(t[1]),nodeIndex:`N${v}`,parent:a};A&&e.name in A&&(e.name=A[e.name]),e.uniformNodeId=e.name,a.children.push(e),W.nodeArr.push(e),v++}}else m.push(d[e]);else")"==d[e]?(m.push(d[e]),f||u++):["'",'"'].includes(d[e])&&!f?(f=!0,m.push(d[e]),g=d[e]):(d[e]==g&&f&&(f=!1),m.push(d[e]));let I=m.slice(1,m.lastIndexOf(")")).join("").trim();if(I.startsWith("("))a.children.push(t(I,a));else{let t=[];if(I.startsWith("'")||I.startsWith('"'))n=I[0],n=I.lastIndexOf(n),t[0]=I.slice(1,n),t[1]=n==I.length-1?void 0:I.slice(I.lastIndexOf(":")+1);else{t=I.split(":");for(let e=0;e<t.length;e++)t[e]=t[e].trim()}1==t.length&&t.push(void 0);let e={name:t[0].match(/^[^[]*/g)[0],length:t[1]?Number(t[1].match(/^[^[]*/g)[0]):Number(t[1]),nodeIndex:`N${v}`,parent:a};A&&e.name in A&&(e.name=A[e.name]),e.uniformNodeId=e.name,a.children.push(e),W.nodeArr.push(e),v++}return a}(e);if(isNaN(t.length)&&(t.length=0),"otherProperty_L"in t)for(var n in t.otherProperty_L)n.includes("95%")&&("95%"!=n&&"height_95%_HPD"!=n&&"95%HPD"!=n||(n=t.otherProperty_L[n],t.length=Number(((n[1]-n[0])/3*2).toFixed(10))),t.isDivergenceTimeTree=!0);return this.root=t,t}parseNexus(t){let r=!1,l=!1,s=!1,i={},h=[];for(let e=0;e<t.length;e++){let n=t[e].trim();if(n.toUpperCase().startsWith("BEGIN TREE"))console.log(n),r=!0;else{if(r&&n.toUpperCase().startsWith("END;")){console.log("树文件结束");break}if(r)if(n.toUpperCase().startsWith("TRANSLATE"))l=!0;else{let e=n.match(/^(\d+)[ \t](.*)[;,]?/);if(e&&l&&(i[e[1]]=e[2].endsWith(",")||e[2].endsWith(";")?e[2].slice(0,-1):e[2]),n.toUpperCase().startsWith("TREE")||n.toUpperCase().startsWith("UTREE")){let e=n.match(/tree (.+) =/i),t="";t=e?e[1].trim():`tree${h.length+1}`,h.push({name:t,newick:-1!=n.indexOf("(")?n.slice(n.indexOf("(")):""}),l=!1,s=!0}else s&&(h[h.length-1].newick+=n,n.endsWith(";")&&(s=!1))}}}return console.log(h),console.log(i),this.parseNewick(h[0].newick,i)}parsePhyloxml(e){const i=this;this.nodeArr=[];let h={},a=0;let t=function r(e,t=void 0){let n=e.selectChildren(),l={name:"",length:null!=e.attr("branch_length")?Number(e.attr("branch_length")):NaN,btArr:[],children:[],nodeIndex:`N${a}`,parent:t};a++,i.nodeArr.push(l);let s=[];return n.each(function(){let e=d3.select(this),t=e.node();var n=t.tagName;switch(s.push(n),n){case"name":l.name=t.innerHTML.trim(),l.name in h?(h[l.name]++,l.name=`${l.name}${h[l.name]}`):h[l.name]=0;break;case"clade":l.children.push(r(e,l));break;case"branch_length":l.length=Number(t.innerHTML.trim());break;case"taxonomy":l.name=e.select("scientific_name").text().trim(),l.name in h?(h[l.name]++,l.name=`${l.name}${h[l.name]}`):h[l.name]=0;break;case"confidence":l.btArr.push(Number(t.innerHTML))}}),s.includes("clade")||delete l.children,l}(d3.select(e).select("phylogeny").selectChildren("clade"));return isNaN(t.length)&&(t.length=0),this.root=t,t}reRoot(t,e=.5){var n=this.nodeArr.findIndex(e=>e.nodeIndex==t);console.log("nodeIndex",n);var r,l=this.nodeArr[n];if(console.log(t,l),"N0"==t)return l;let s={children:[],btArr:[],nodeIndex:"N0"};let i={};for(r in l)i[r]=l[r];i.length=l.length*(1-e),i.parent=s,s.children.push(i);let h=function e(t){let n={children:[]};return t.parent.children.forEach(e=>{e!=t&&n.children.push(e)}),n.length=t.length,n.btArr=t.parent.btArr,n.nodeIndex=t.nodeIndex,n.uniformNodeId=t.uniformNodeId,n.name=t.parent.name,t.parent&&t.parent.parent&&n.children.push(e(t.parent)),n}(l);return h.length=l.length*e,h.nodeIndex="N-1",h.uniformNodeId="N-1",s.children.push(h),s.children.reverse(),s.length=l.length*e,s}}export{TreeParser};